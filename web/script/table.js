// Generated by LiveScript 1.2.0
(function(){
  var Table, Cell;
  Table = (function(){
    Table.displayName = 'Table';
    var prototype = Table.prototype, constructor = Table;
    prototype.SOCKET_URL = 'ws://localhost:8888/websocket/';
    function Table($container){
      this.$container = $container;
    }
    prototype.width = 0;
    prototype.height = 0;
    prototype.$trs = [];
    prototype.cells = {};
    prototype.initialize = function(rows, cols){
      var this$ = this;
      this.socket = new WebSocket(this.SOCKET_URL);
      this.socket.onmessage = function(message){
        this$.handleMessages($.parseJSON(message.data));
      };
      this.$table = $('<table class="spreadsheet"/>');
      this.$container.append(this.$table);
      this.ensureSize(rows, cols);
    };
    prototype.handleMessages = function(messages){
      var i$, len$, message;
      console.log('messages');
      for (i$ = 0, len$ = messages.length; i$ < len$; ++i$) {
        message = messages[i$];
        if (message.value != null) {
          this.setValue(message.cell[0], message.cell[1], nl2br(message.value));
        }
        if (message.binding != null) {
          this.setBinding(message.cell[0], message.cell[1], nl2br(message.binding));
        }
      }
    };
    prototype.redraw = function(){
      var table, i$, to$, row, j$, to1$, col;
      table = "";
      for (i$ = 0, to$ = this.height; i$ < to$; ++i$) {
        row = i$;
        table += "<tr>";
        for (j$ = 0, to1$ = this.width; j$ < to1$; ++j$) {
          col = j$;
          table += "<td>" + this.cell(row, col).value + "</td>";
        }
        table += "</tr>";
      }
      return this.$table.html(table);
    };
    prototype.ensureSize = function(minHeight, minWidth){
      var i$, to$, row, $row, width, c, $tr, col;
      if (this.width < minWidth) {
        for (i$ = 0, to$ = this.height; i$ < to$; ++i$) {
          row = i$;
          $row = this.$trs[row];
          width = this.width;
          while (width < minWidth) {
            c = new Cell(row, width, this.socket);
            this.setCell(row, width, c);
            $row.append(c.$elem());
            width++;
          }
        }
        this.width = Math.max(this.width, minWidth);
      }
      while (this.height < minHeight) {
        $tr = $("<tr></tr>");
        for (i$ = 0, to$ = this.width; i$ < to$; ++i$) {
          col = i$;
          c = new Cell(this.height, col, this.socket);
          this.setCell(this.height, col, c);
          $tr.append(c.$elem());
        }
        this.$table.append($tr);
        this.$trs.push($tr);
        this.height++;
      }
    };
    prototype.cell = function(row, col){
      return this.cells[row + "," + col];
    };
    prototype.setCell = function(row, col, cell){
      this.cells[row + "," + col] = cell;
    };
    prototype.setValue = function(row, column, value){
      this.ensureSize(row + 1, column + 1);
      this.cell(row, column).setValue(value);
    };
    prototype.setBinding = function(row, column, value){
      this.ensureSize(row + 1, column + 1);
      this.cell(row, column).setBinding(value);
    };
    return Table;
  }());
  Cell = (function(){
    Cell.displayName = 'Cell';
    var prototype = Cell.prototype, constructor = Cell;
    function Cell(row, coll, socket){
      var this$ = this;
      this.row = row;
      this.coll = coll;
      this.socket = socket;
      this.$td = $('<td><div class="value"></div><input style="display:none" class="binding"/></td>');
      this.$value = this.$td.find('.value').eq(0);
      this.$binding = this.$td.find('.binding').eq(0);
      this.$td.dblclick(function(){
        this$.$value.hide();
        this$.$binding.show().focus();
      });
      this.$binding.blur(function(){
        return this$.blur();
      });
      this.$binding.keypress(function(event){
        if (event.keyCode === 13) {
          return this$.blur();
        }
      });
    }
    prototype.blur = function(){
      this.$binding.hide();
      this.$value.show();
      this.setBinding(this.$binding.val());
      this.sendToServer();
    };
    prototype.$elem = function(){
      return this.$td;
    };
    prototype.sendToServer = function(){
      this.socket.send(JSON.stringify({
        cell: [this.row, this.coll],
        binding: this.$binding.val()
      }));
    };
    prototype.setBinding = function(binding){
      this.binding = binding;
      this.update();
    };
    prototype.update = function(){
      var ref$;
      if (((ref$ = this.binding) != null ? ref$.substr(0, 1) : void 8) === '=') {
        this.$value.html(this.value);
      } else {
        this.$value.html(this.binding);
      }
      this.$binding.val(this.binding);
    };
    prototype.setValue = function(value){
      this.value = value;
      this.update();
    };
    return Cell;
  }());
  function nl2br(str, is_xhtml){
    var breakTag;
    breakTag = is_xhtml || typeof is_xhtml === 'undefined' ? '<br />' : '<br>';
    return (str + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + breakTag + '$2');
  }
  $(document).ready(function(){
    var table;
    table = new Table($('#table-container'));
    table.initialize(30, 10);
  });
}).call(this);
